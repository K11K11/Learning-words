import Tkinter as tk
import ttk
#from tkinter import ttk
import codecs, os, itertools, collections, fileinput, math, operator, time, datetime


XLARGE_FONT = ("Verdana", 14)
LARGE_FONT = ("Verdana", 12)
MEDIUM_FONT = ("Verdana", 10)
SMALL_FONT = ("Verdana", 9,"italic")
XSMALL_FONT = ("Verdana", 8)

class DictionaryInTk(tk.Tk,tk.StringVar): 
    
    def __init__(self,*args,**kwargs): 

        #################### Initializations ########################################################################################
        tk.Tk.__init__(self,*args,**kwargs) #here you need to initialize the inherited class
        #tk.StringVar.__init__(self,*args,**kwargs) 
        tk.Tk.wm_title(self, "Goldfish_Dictionary") #Give a name to the app 
        #var = tk.StringVar(self)  #make an instance of StringVar, defining the name of it


        #################### Main Container ##########################################################################################
        container = tk.Frame(self) 
        container.grid()
        container.configure(height=4, width=20)



        #################### Drop-down Menu Bar #######################################################################################
        menubar = tk.Menu(container)
        filemenu = tk.Menu(menubar, tearoff = 0)
        filemenu.add_command(label = 'Exit', command = quit)
        menubar.add_cascade(label = 'File', menu = filemenu)
        filemenu = tk.Menu(menubar, tearoff = 0)
        filemenu.add_command(label = 'Go to Start Page', command = lambda: self.show_frame(StartPage))
        filemenu.add_command(label = 'Go to Add new words', command = lambda: self.show_frame(PageOne))
        filemenu.add_command(label = 'Go to Revise the words added', command = lambda: self.show_frame(PageTwo))
        filemenu.add_command(label = 'Go to Statistics', command = lambda: self.show_frame(PageThree))
        menubar.add_cascade(label  = 'Go to', menu = filemenu)
        filemenu.add_separator()
        tk.Tk.config(self, menu=menubar)
        ################################################################################################################################

        #################### How to iterate among frames ###############################################################################
        self.frames = {} #This dictionary will be filled with frames
        
        for F in (PageThree, PageTwo, PageOne, StartPage):
            frame = F(container,self)
            self.frames[F] = frame
            frame.grid(row=0, column=0, sticky="nsew")
            self.show_frame(F)

    def show_frame(self, cont):
        frame = self.frames[cont] #frame is the dictionary
        frame.tkraise()
        return

    
######################### START PAGE ###############################################################################################################################
class StartPage(tk.Frame):
    
    def __init__(self, parent, controller):#Define the method for StartPage -- What to do
        tk.Frame.__init__(self,parent)# To initialise the base class, a subclass must call the __init__ method explicitly
        
      
        label1 = tk.Label(self, text = "Welcome to the Goldfish Dictionary", font=LARGE_FONT)
        label1.grid(row=1, column=1, columnspan = 9, pady = 5, sticky = 'nsew')
        label1.config(background='light green')
        
        label2 = tk.Label(self, text = "In this dictionary you will be able to:", font=MEDIUM_FONT)
        label2.grid(row=2, column=4, sticky = 'nsew')

        label3 = tk.Label(self, text = "1. Add new words to learn", font=MEDIUM_FONT)
        label3.grid(row=3, column=4, sticky = 'nsew')

        label4 = tk.Label(self, text = "2. Revise the words you learnt", font=MEDIUM_FONT)
        label4.grid(row=4, column=4, sticky = 'nsew')

        label5 = tk.Label(self, text = "3.See some stats of your learning process", font=MEDIUM_FONT)
        label5.grid(row=5, column=4, sticky = 'nsew')

        #label7 = tk.Label(self, text = "Use 'Go to' to select one of the options", font=MEDIUM_FONT)
        #label7.grid(row=6, column=7, rowspan = 1, padx = 5, sticky = 'nsew')
        #label7.config(background='red')
        
        button1 = ttk.Button(self, text = "Add new words",
                            command=lambda: controller.show_frame(PageOne))
        button1.grid(row=3, column=7, columnspan = 1)

        button2 = ttk.Button(self, text = "Revise words added",
                            command=lambda: controller.show_frame(PageTwo))
        button2.grid(row=4, column=7, columnspan = 1)

        button3 = ttk.Button(self, text = "Statistics",
                            command=lambda: controller.show_frame(PageThree))
        button3.grid(row=5, column=7, columnspan = 1)
        

######################### PAGE ONE ###############################################################################################################################
class PageOne(tk.Frame,tk.StringVar):
    
    def __init__(self,parent,controller):
        tk.Frame.__init__(self,parent)
        tk.StringVar.__init__(self,parent)
        NameOfTheFile = "German_Dictionary"
        InitialWeight = int(100)
        InitialIter   = int(0)

        ######################### FUNCTIONS ###############################################################################
        def OpenDict(self,DictTxt): #See how can you use Pickling instead of this notebook
            check_words = codecs.open(NameOfTheFile, mode = "r", encoding = 'utf-8')
            lines = check_words.read().split(',')
            Foreign_words = [x.split(':',1)[0] for x in lines] 
            return Foreign_words

        Foreign_words = OpenDict(self,NameOfTheFile)
        
        def CheckIfInDict(self,entry,label,words):
            word = str(entry.get())
            if word in words:
                current_color = entry.cget("background")
                next_color = "pink" if current_color == "pink" else "pink"
                entry.config(background=next_color)
                e1.delete(0,'end')
                e1.insert(0,'Word already insterted! :)')
            else:
                current_color = entry.cget("background")
                next_color = "white"
                entry.config(background=next_color)
                
        def SaveInDict(self,NameOfTheFile,entry1,entry2,InitialWeight,InitialIter,Foreign_words,label):
            new_Foreign_word = entry1.get()
            new_Mother_word  = entry2.get()
            Checkpath = os.path.abspath(NameOfTheFile)
            stats = os.stat(Checkpath).st_size
            if stats == 0:
                new_combination = '%s: %s: %s: %s' %(new_Foreign_word,new_Mother_word,InitialWeight,InitialIter)
            else:	 
                new_combination = ',%s: %s: %s: %s' %(new_Foreign_word,new_Mother_word,InitialWeight,InitialIter)
                print("\n The word %s is added! If you want to stop please type: exit\n" %new_Foreign_word)
                Foreign_words.append(new_Foreign_word)
                with codecs.open(NameOfTheFile,'a', encoding = 'utf-8') as f:
                    f.write(new_combination)
                    f.close
                #This is a check implementation, to see if there are any repetitions
                occurences = {}
                for word in Foreign_words: #check for doubles or triples and so on. Need to improve the code to eliminate this
                    occurences[word] = occurences.get(word,0)+1
                    if occurences[word]>1:
                        print ("The word", word, "occurs", occurences[word], "times in the dictionary! It should be deleted")
            entry1.delete(0,'end')
            entry2.delete(0,'end')
            label.grid(row=4, column=6)
            return (new_Foreign_word, Foreign_words)

        
        def show_entry_fields():
            print ("Foreign word: %s\nTranslated word: %s" (e1.get(), e2.get()))

        def forget_label(self, labelNo):
            labelNo.grid_forget()

        ######################################################################################################################



        ######################### LABELS #####################################################################################        
        label1 = tk.Label(self, text = "Add New Words", font=LARGE_FONT)
        label1.grid(row=1, column=1, columnspan=15, sticky='ew')
        label1.config(background='light green')
        
        label2 = tk.Label(self, text = "Original word", font=MEDIUM_FONT)
        label2.grid(row=2, column=1, columnspan = 4)               

        label3 = tk.Label(self, text = "Translated word", font=MEDIUM_FONT)
        label3.grid(row=2, column=8, columnspan=4)

        label4 = tk.Label(self, text = "The word is added!", font=SMALL_FONT)
        label4.grid(row=4, column=6)
        label4.grid_forget()
        ######################################################################################################################

        ######################### ENTRIES #####################################################################################
        e1 = tk.Entry(self, font = XSMALL_FONT)
        e1.grid(row=3, column=2, columnspan = 3)
        e1.delete(0,'end')
        #e1.insert(0,'Type in the original')
        e1.focus()
        e1.bind('<Tab>', lambda event: CheckIfInDict(self,e1,label1,Foreign_words))
        e1.bind('<Leave>',lambda event: CheckIfInDict(self,e1,label1,Foreign_words))
        
        
        e2 = tk.Entry(self, font = XSMALL_FONT)
        e2.grid(row=3, column=8, columnspan = 3)
        e2.delete(0,'end')
        #e2.insert(0,'Type in the translated')
        e2.focus()
        e2.bind('<Return>',lambda event: SaveInDict(self,NameOfTheFile,e1,e2,InitialWeight,InitialIter,Foreign_words,label4))
        e2.bind('<Leave>', lambda event: forget_label(self, label4))
        e2.bind('<Tab>', lambda event: forget_label(self, label4))
        ######################################################################################################################    



        ######################### BUTTONS #####################################################################################
        #button1 = ttk.Button(self, text = "Back to Start Page",
        #                    command=lambda: controller.show_frame(StartPage))
        #button1.grid(row=8, column=6)
        #button1.focus()
        
        #button2 = ttk.Button(self, text = "Revise the words added",
        #                    command=lambda: controller.show_frame(PageTwo))
        #button2.grid(row=6, column=6)
        #button2.focus()

        button3 = ttk.Button(self, text = "Save",command = lambda: SaveInDict(self,NameOfTheFile,e1,e2,InitialWeight,InitialIter,Foreign_words,label4))
        button3.grid(row=5, column=6)
        button3.focus()

        #button4 = ttk.Button(self, text = "Check word",command = lambda: CheckIfInDict(self,e1,label1,Foreign_words))
        #button4.grid(row=4,column=3)
        #button4.focus()

        #button5 = ttk.Button(self, text = "Statistics",
        #                    command=lambda: controller.show_frame(PageThree))
        #button5.grid(row=7, column=6)
        #button5.focus()
        ######################################################################################################################
        
            
######################### PAGE TWO ###########################################################################################################################
class PageTwo(tk.Frame,tk.StringVar):
    
    def __init__(self,parent,controller):
        tk.Frame.__init__(self,parent)
        tk.StringVar.__init__(self,parent)
        NameOfTheFile = "German_Dictionary"
        check_words = codecs.open(NameOfTheFile, mode = "r", encoding = 'utf-8')
        revise = {}
        var1 = tk.StringVar()
        var2 = tk.StringVar()
        var3 = tk.StringVar()
        var1.set('')
        var2.set('')
        var3.set('')
        #entry.delete(0, 'end')
            
        with open(NameOfTheFile) as G_D:
            initial = G_D.read()       #create an instance of the text file
        fullwords = initial.split(',') #split it to the initial lang word with the translation
        dictionary = {}                #create a dictionary
        weighted_dict = {}
        indexed_dict = {}
        for each in fullwords:        
            (lang1,lang2,lang3,lang4) = each.split(': ') 
            dictionary[lang1] = str(lang2)               
            weighted_dict[lang1] = int(lang3)	         
            indexed_dict[lang1] = int(lang4)             #assign a counter to each foreign word to control how many times it has been revised



        ######################### FUNCTIONS #################################################################
        def CheckIfInt(self,entry):
            '''Checks if the entry is an integer'''
            IsNumber = entry.get()
            try:
                int(IsNumber)
            except:
                current_color = entry.cget("background")
                next_color = "pink" if current_color == "pink" else "pink"
                entry.config(background=next_color)
                entry.delete(0,'end')
                entry.insert(0,'Not a Number')
            else:
                current_color = entry.cget("background")
                next_color = "white"
                entry.config(background=next_color)


        def choosewords(self,entry,weighted_dict,vari,label,button):
            '''Used for the button where the user inputs the number of words she wants to revise.
               1. It changes the colour of the entry if it is not an integer
               2. It initializes the global variables: KeysToExamine, wordcounter, NumOfWords, yescounter, nocounter
               3. Then the algorithm to select the appropriate words are selected
               4. Then it hides the number of words entry button'''
            IsNumber = entry.get()
            var2.set('')
            var3.set('')
            try:
                int(IsNumber)
            except:
                current_color = entry.cget("background")
                next_color = "pink" if current_color == "pink" else "pink"
                entry.config(background=next_color)
                entry.delete(0,'end')
                entry.insert(0,'Not a Number')
            else:
                current_color = entry.cget("background")
                next_color = "white"
                entry.config(background=next_color)
                
                ######################## Here starts the algorithm of the WORD SELECTION #################################
                global KeysToExamine
                KeysToExamine = []
                global wordcounter
                wordcounter = 0
                global NumOfWords
                NumOfWords = []
                global yescounter
                yescounter = 0
                global nocounter
                nocounter = 0
                
                NumOfWords = int(entry.get()) #The number of words the user asked to revise
                half = NumOfWords/2
                RoundedHalf = int(math.ceil(half))
                unexamined = [k for (k,v) in indexed_dict.items() if v == 0] #The words that have not been examined at all
                NoOfUnexamined = len(unexamined)
                print('The unexamined words are: %s' %NoOfUnexamined)
                print('The half of the selections is: %s' %RoundedHalf)

                if NoOfUnexamined < RoundedHalf:                        #If the unexamined are less than half of the selected to be examined
                    KeysToExamine = unexamined                          #Put them all in the list that need to be examined 
                    ToSubtract = NoOfUnexamined                         #And set the number ToSubtract to be the number of the unexamined
                else:
                    for i in range(RoundedHalf): #Otherwise
                        KeysToExamine.append(unexamined[i]) #Put in the list to be examined half of the selected number to be the unexamined
                    ToSubtract = RoundedHalf

                NoOFRestToExamine = NumOfWords - ToSubtract
                print('The rest to be examined are: %s' %NoOFRestToExamine)

                #Sort the all the words based on their weight
                SortedWeighted = sorted(weighted_dict.items(), key = lambda weight: weight[1])  
                ############### Another technique to use the SortedWeigthed would be: key=operator.itemgetter(1)) ##########################

                #Get just the words removing the weight from the sorted words
                PreSortedWeightedDict = [x[0] for x in SortedWeighted]

                #Pick up the words that have not been selected already
                SortedWeightedDict = [word for word in PreSortedWeightedDict if word not in KeysToExamine]

                #Append the selected words inside the KeysToExamine
                for i in range(NoOFRestToExamine):
                    KeysToExamine.append(SortedWeightedDict[i])
                print("The words to examine are: %s" %KeysToExamine)

                #Hide the entry, the button and the label
                vari.set(KeysToExamine[wordcounter])
                entry.delete(0,'end')
                entry.grid_forget()
                label.grid_forget()
                button.grid_forget()
                return (KeysToExamine, wordcounter, NumOfWords)
                ############################### END of the selection algorithm ##############################################


        def overwritefun(self,file,oldword,newword):
            '''Overwrites the appropriate stats (weight, number of revisions) in the notepad file'''
            f = open(file,'r')
            filedata = f.read()
            f.close()
            newfiledata = filedata.replace(oldword,newword)
            f = open(file,'w')
            f.write(newfiledata)
            f.close()

        
        def ExamineWordsYES(self,KeysToExamine,dictionary,weighted_dict,indexed_dict):
            '''What to do if the user clicks the Yes button during the revision'''
            global wordcounter
            global yescounter
            yescounter = yescounter + 1
            if var2.get()!=str('End of the revision'):
                dict_key = str(KeysToExamine[wordcounter])
                dict_value = str(dictionary[dict_key])   
                new_lang4 = int(indexed_dict[dict_key]) + 1 
                new_lang3 = int(int(weighted_dict[dict_key]) + 10)
                text_to_search = "%s: %s: %s: %s" %(dict_key,dict_value,weighted_dict[dict_key],indexed_dict[dict_key])
                indexed_dict[dict_key] = int(new_lang4)
                weighted_dict[dict_key] = int(new_lang3)
                text_to_replace = "%s: %s: %s: %s" %(dict_key,dict_value,weighted_dict[dict_key],indexed_dict[dict_key])
                overwritefun(self,'German_Dictionary',text_to_search,text_to_replace)
                print("\nYou have revised the word %s, %s times" %(dict_key, indexed_dict[dict_key]))
                var2.set(dict_value)
            else:
                var1.set('')
                var2.set('End of the revision') 
            return



        def ExamineWordsNO(self,KeysToExamine,dictionary,weighted_dict,indexed_dict):
            '''What to do if the user clicks the No button during the revision'''
            global wordcounter
            global nocounter
            nocounter = nocounter + 1
            if var2.get()!=str('End of the revision'):
                dict_key = str(KeysToExamine[wordcounter])
                dict_value = str(dictionary[dict_key])   
                new_lang4 = int(indexed_dict[dict_key]) + 1
                new_lang3 = int(int(weighted_dict[dict_key]) - 10)
                text_to_search = "%s: %s: %s: %s" %(dict_key,dict_value,weighted_dict[dict_key],indexed_dict[dict_key])
                indexed_dict[dict_key] = int(new_lang4)
                weighted_dict[dict_key] = int(new_lang3) 
                text_to_replace = "%s: %s: %s: %s" %(dict_key,dict_value,weighted_dict[dict_key],indexed_dict[dict_key])
                overwritefun(self,'German_Dictionary',text_to_search,text_to_replace)
                var2.set(dict_value)
                print("\nYou have revised the word %s, %s times" %(dict_key, indexed_dict[dict_key]))
            else:
                var1.set('')
                var2.set('End of the revision')
            return



        def ShowBackWithButton(self,entry,entryrow,entrycol,label,labelrow,labelcol,labelcolspan,button,buttonrow,buttoncol):
            entry.grid(row=int(entryrow),column=int(entrycol))
            entry.focus()
            button.grid(row=int(buttonrow),column=int(buttoncol))
            label.grid(row=int(labelrow),column=int(labelcol),columnspan=int(labelcolspan))


            
        def ShowBack(self,label,labelrow,labelcol,labelcolspan):
            label.grid(row=int(labelrow),column=int(labelcol),columnspan=int(labelcolspan))     



            
        def ExamineWordsNext(self,KeysToExamine,dictionary):
            global wordcounter
            if wordcounter < len(KeysToExamine)-1:
                print(wordcounter)
                wordcounter = wordcounter + 1
                dict_key = str(KeysToExamine[wordcounter])
                var1.set(dict_key)
                var2.set('')
            elif wordcounter >= len(KeysToExamine)-1:
                var1.set('')
                var2.set('End of the revision')
                ShowBackWithButton(self,entry = e1,entryrow = 2,entrycol = 8,label = label2, labelrow = 2,labelcol = 1, labelcolspan = 7,button = button1,
                                   buttonrow = 2, buttoncol = 9)
                ShowBack(self,label = label7,labelrow = 7,labelcol = 1,labelcolspan = 3)
                ShowBack(self,label = label8,labelrow = 7,labelcol = 4,labelcolspan = 3)
                var3 = correctness(self)
            return wordcounter



        def correctness(self):
            global yescounter, nocounter
            percent = "{0:.0f}%".format(float(yescounter)/(float(yescounter)+float(nocounter)) * 100)
            var3.set(percent)
        ###################################################################################################
            
        
        ######################### ENTRIES #################################################################
        e1 = tk.Entry(self, font = XSMALL_FONT)
        e1.grid(row=2, column=8)
        e1.focus()
        e1.bind('<Tab>', lambda event: CheckIfInt(self,e1))
        e1.bind('<Leave>',lambda event: CheckIfInt(self,e1))
        e1.bind('<Return>',lambda event: choosewords(self,e1,weighted_dict,var1,label2,button1))
        e1.delete(0,'end')
        ###################################################################################################        


        ######################### LABELS #################################################################
        label1 = tk.Label(self, text = "Revise the words added", font=LARGE_FONT)
        label1.grid(row=1, column=1, columnspan=9, sticky='ew')
        label1.config(background='light green')

        label2 = tk.Label(self, text = 'Select the number of words you want to revise', font=MEDIUM_FONT)
        label2.grid(row=2, column=1, columnspan=7, sticky='ew')

        
        label3 = tk.Label(self, text = "Do you know the word:", font=SMALL_FONT)
        label3.grid(row=3, column=1, columnspan=3, sticky='ew')

        
        label4 = tk.Label(self, textvariable = var1 , font=SMALL_FONT)
        label4.grid(row=3, column=4, columnspan=2, sticky='ew')

        label5 = tk.Label(self, text = "It means...", font=SMALL_FONT)
        label5.grid(row=4, column=1, columnspan=3, sticky='ew')

        label6 = tk.Label(self, textvariable = var2, font=SMALL_FONT)
        label6.grid(row=4, column=4, columnspan=2, sticky='ew')

        label7 = tk.Label(self, text = 'Your rate of success was:', font=SMALL_FONT)
        label7.grid(row=5,column=1,columnspan=3,sticky='ew')
        label7.grid_forget()

        label8 = tk.Label(self, textvariable = var3, font=SMALL_FONT)
        label8.grid(row=5, column=4, columnspan=2, sticky='ew')
        label8.grid_forget()
        ###################################################################################################


        ######################### BUTTONS #################################################################
        button1 = ttk.Button(self, text = "OK",
                            command = lambda: choosewords(self,e1,weighted_dict,var1,label2,button1))
        button1.grid(row=2, column=9)


        button2 = ttk.Button(self, text='Start',
                             command = lambda: choosewords(self,e1,weighted_dict))
        
        button3 = ttk.Button(self, text = "Yes",
                            command =lambda: ExamineWordsYES(self,KeysToExamine,dictionary,weighted_dict,indexed_dict))
        button3.grid(row=3, column=7)
        
        button4 = ttk.Button(self, text = "No",
                            command=lambda: ExamineWordsNO(self,KeysToExamine,dictionary,weighted_dict,indexed_dict))
        button4.grid(row=3, column=8)

        button5 = ttk.Button(self, text = "Next",
                            command=lambda: ExamineWordsNext(self,KeysToExamine,dictionary))
        button5.grid(row=3, column=9)
        
      #  button6 = ttk.Button(self, text = "Back to Start Page",
      #                      command=lambda: controller.show_frame(StartPage))
      #  button6.grid(row=10, column=5)

      #  button7 = ttk.Button(self, text = "Add new words",
      #                      command=lambda: controller.show_frame(PageOne))
      #  button7.grid(row=8, column=5)

      #  button8 = ttk.Button(self, text = "Statistics",
      #                      command=lambda: controller.show_frame(PageThree))
      #  button8.grid(row=9, column=5)
      #  button8.focus()
        ##################################################################################################




######################## PAGE THREE  ################################################################################################################################    
class PageThree(tk.Frame,tk.StringVar):
    
    def __init__(self,parent,controller):
        tk.Frame.__init__(self,parent)
        tk.StringVar.__init__(self,parent)


        NameOfTheFile = "German_Dictionary"
        check_words = codecs.open(NameOfTheFile, mode = "r", encoding = 'utf-8')
        with open(NameOfTheFile) as G_D:
                    initial = G_D.read()       #create an instance of the text file
        fullwords = initial.split(',')         #split it to the initial lang word with the translation
        NoOfWords = len(fullwords)+1

        #for each in fullwords:        
        #    (lang1,lang2,lang3,lang4) = each.split(': ') #split the lang1 and lang2 using : as the separator and assign it

        NotRevised = [int(each.split(': ' )[3]) for each in fullwords].count(0)
        
        global timest
        
        
        var1 = tk.StringVar()
        var1.set('')
        
        #button1 = ttk.Button(self, text = "Add new words",
        #                        command=lambda: controller.show_frame(PageOne))
        #button1.grid(row=3, column=10)

        #button2 = ttk.Button(self, text = "Revise the words added",
        #                        command=lambda: controller.show_frame(PageTwo))
        #button2.grid(row=4, column=10)

        #button3 = ttk.Button(self, text = "Back to Start Page",
        #                        command=lambda: controller.show_frame(StartPage))
        #button3.grid(row=5, column=10)

        #button4 = ttk.Button(self, text = "Print the timestamp",
        #                         command = lambda: times(self))
        #button4.grid(row = 6, column = 10)

        label1 = tk.Label(self, text = "Statistics at first glance", font=LARGE_FONT)
        label1.grid(row=1, column=1, columnspan=9, sticky='ew')
        label1.config(background='light green')

        label2 = tk.Label(self, text = "Number of words in the dictionary: %s" %NoOfWords, font = SMALL_FONT)
        label2.grid(row = 3, column = 2, sticky = 'ew')

        label3 = tk.Label(self, text = "Number of words revised: %s" %(NoOfWords-NotRevised), font = SMALL_FONT)
        label3.grid(row = 4, column = 2, sticky = 'ew')

        label4 = tk.Label(self, text = "Number of words not revised: %s" %NotRevised, font = SMALL_FONT)
        label4.grid(row = 5, column = 2, sticky = 'ew')

        
        label5 = tk.Label(self, textvariable = var1, font = SMALL_FONT)
        label5.grid(row = 6, column = 12, sticky = 'ew')

        def times(self):
            global timest
            ts = time.time()
            timest = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
            var1.set(timest)
            
################################################################################################################################################################



app = DictionaryInTk()
app.geometry("600x220+30+30")
app.mainloop()
